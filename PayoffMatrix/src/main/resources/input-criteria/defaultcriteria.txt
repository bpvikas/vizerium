# The volatility of the underlying. Used to calculate the range of the underlying.
# This can be either the implied volatility (e.g. India VIX for the Index) or the historical volatility
# For implied volatility, just populate India VIX in the variable "underlying.volatility.standardDeviation". The other values 
# underlying.volatility.mean and underlying.last.closing.price will be calculated from the historical data.
# If none of the values are provided, then the historical volatility auto-calculated from the 4.5 years closing prices of the underlying will be used.
# The range calculation here will also take into consideration the time to expiry either from contract.duration/contract.series or from expiryDate
#Possible values for standardDeviationMultiple are 1, 2, 3, for 1st, 2nd and 3rd standard deviation.

underlying.impliedVolatility=
underlying.last.closing.price=
underlying.volatility.standardDeviationMultiple=

# The upper and lower end of the range of the underlying.
# If this is provided, then the standard deviation calculations are ignored.
underlying.range.top=
underlying.range.bottom=

#Steps in underlying range, the payoff will be calculated at each step within the range
#For e.g. if the value is 25, payoff will be calculated at 10000, 10025, 10050, 10100, and so on.
underlying.range.step=25

#The exchange
exchange=TEI

# The max loss which the trader is willing to bear
maxLoss=10000.00

# The bias to be used to bear minimum loss with small sized profits. # minLoss
# The bias to be used to obtain maximum profit with potentially large losses. #maxProfit
tradingBias=minLoss

# contract.duration can be "month" or "week", depending on whether you are trading the Index or BankIndex respectively. 
contract.duration=

# contract.series Default is near, possible values are "near", "mid", "far"
contract.series=

#If not provided, taken as the Index default of the last Thursday of the current settlement
# If the current date is already past the last Thursday of the month, it will pick up the last Thursday of the next month.
#format DDMMYYYY
expiryDate=

#Any existing positions that needs to be considered in the payoff, with the premium prices at which they were purchased or sold.
#Format CE/PE,Strike,BUY/SELL,Lots,Premium Paid,Traded Date(DDMMYYYY), NEAR/MID/FAR
#Format CE,10500,short,1,98.45,04062018,near
existingposition1=
existingposition2=
existingposition3=
existingposition4=
existingposition5=

#Option Chain datasource, values are web, localhtml
option.chain.remote.datasource=localhtml

#Location where option chains are stored locally for processing, values are csv, db
option.chain.local.datasource=csv

#Location where historical data is stored locally for processing, values are csv, db
historical.data.local.datasource=csv

# The minimum open interest that a particular option needs to have so that it is considered in the payoff strategy
# Helps to eliminate Options which may not be traded by the market.
# If this value is not provided, then the average of the log of all the current OIs will be considered.
minimum.openinterest=

# The premium limit on every order. Helps in reducing the cost incurred in a single trade.
maximum.option.premium=400.00

#Margin for sell orders. Total margin to be maintained for sell orders.
sell.order.margin=12.5

#Total amount available for investing
investing.amount=400000.00

#max positions to be held(including existing positions)
#Currently, this value can be "no of existing positions + 3" for 512 MB Java memory
max.option.positions=2

#number of lots to be held for a particular option
max.option.lots=1

#The lot size (e.g. 75 for the Index or 40 for the Bank Index)
lotsize=